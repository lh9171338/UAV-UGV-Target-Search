/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#include <lcm/lcm_coretypes.h>

#ifndef __JMD_LCM_ChromaTag_Detection_Type_hpp__
#define __JMD_LCM_ChromaTag_Detection_Type_hpp__

#include <vector>

namespace JMD
{

class LCM_ChromaTag_Detection_Type
{
    public:
        int64_t    Timestamp;

        int32_t    DetectionSize;

        std::vector< int32_t > DetectionRings;

        std::vector< std::vector< double > > DetectionCornersU;

        std::vector< std::vector< double > > DetectionCornersV;

        std::vector< int8_t > HasCode;

        std::vector< int32_t > CodeSize;

        std::vector< std::vector< int8_t > > Code;

        std::vector< int8_t > HasPose;

        std::vector< std::vector< double > > PoseTranslation;

        std::vector< std::vector< double > > PoseRotation;

    public:
        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void *buf, int offset, int maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline int getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to reqad while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void *buf, int offset, int maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "LCM_ChromaTag_Detection_Type"
         */
        inline static const char* getTypeName();

        // LCM support functions. Users should not call these
        inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
        inline int _getEncodedSizeNoHash() const;
        inline int _decodeNoHash(const void *buf, int offset, int maxlen);
        inline static uint64_t _computeHash(const __lcm_hash_ptr *p);
};

int LCM_ChromaTag_Detection_Type::encode(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;
    int64_t hash = (int64_t)getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int LCM_ChromaTag_Detection_Type::decode(const void *buf, int offset, int maxlen)
{
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int LCM_ChromaTag_Detection_Type::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t LCM_ChromaTag_Detection_Type::getHash()
{
    static int64_t hash = _computeHash(NULL);
    return hash;
}

const char* LCM_ChromaTag_Detection_Type::getTypeName()
{
    return "LCM_ChromaTag_Detection_Type";
}

int LCM_ChromaTag_Detection_Type::_encodeNoHash(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->Timestamp, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->DetectionSize, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    if(this->DetectionSize > 0) {
        tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->DetectionRings[0], this->DetectionSize);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    for (int a0 = 0; a0 < this->DetectionSize; a0++) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->DetectionCornersU[a0][0], 12);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    for (int a0 = 0; a0 < this->DetectionSize; a0++) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->DetectionCornersV[a0][0], 12);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->DetectionSize > 0) {
        tlen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->HasCode[0], this->DetectionSize);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->DetectionSize > 0) {
        tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->CodeSize[0], this->DetectionSize);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    for (int a0 = 0; a0 < this->DetectionSize; a0++) {
        tlen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->Code[a0][0], 36);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->DetectionSize > 0) {
        tlen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->HasPose[0], this->DetectionSize);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    for (int a0 = 0; a0 < this->DetectionSize; a0++) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->PoseTranslation[a0][0], 3);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    for (int a0 = 0; a0 < this->DetectionSize; a0++) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->PoseRotation[a0][0], 4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    return pos;
}

int LCM_ChromaTag_Detection_Type::_decodeNoHash(const void *buf, int offset, int maxlen)
{
    int pos = 0, tlen;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->Timestamp, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->DetectionSize, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    if(this->DetectionSize) {
        this->DetectionRings.resize(this->DetectionSize);
        tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->DetectionRings[0], this->DetectionSize);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    this->DetectionCornersU.resize(this->DetectionSize);
    for (int a0 = 0; a0 < this->DetectionSize; a0++) {
        if(12) {
            this->DetectionCornersU[a0].resize(12);
            tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->DetectionCornersU[a0][0], 12);
            if(tlen < 0) return tlen; else pos += tlen;
        }
    }

    this->DetectionCornersV.resize(this->DetectionSize);
    for (int a0 = 0; a0 < this->DetectionSize; a0++) {
        if(12) {
            this->DetectionCornersV[a0].resize(12);
            tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->DetectionCornersV[a0][0], 12);
            if(tlen < 0) return tlen; else pos += tlen;
        }
    }

    if(this->DetectionSize) {
        this->HasCode.resize(this->DetectionSize);
        tlen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->HasCode[0], this->DetectionSize);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->DetectionSize) {
        this->CodeSize.resize(this->DetectionSize);
        tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->CodeSize[0], this->DetectionSize);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    this->Code.resize(this->DetectionSize);
    for (int a0 = 0; a0 < this->DetectionSize; a0++) {
        if(36) {
            this->Code[a0].resize(36);
            tlen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->Code[a0][0], 36);
            if(tlen < 0) return tlen; else pos += tlen;
        }
    }

    if(this->DetectionSize) {
        this->HasPose.resize(this->DetectionSize);
        tlen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->HasPose[0], this->DetectionSize);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    this->PoseTranslation.resize(this->DetectionSize);
    for (int a0 = 0; a0 < this->DetectionSize; a0++) {
        if(3) {
            this->PoseTranslation[a0].resize(3);
            tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->PoseTranslation[a0][0], 3);
            if(tlen < 0) return tlen; else pos += tlen;
        }
    }

    this->PoseRotation.resize(this->DetectionSize);
    for (int a0 = 0; a0 < this->DetectionSize; a0++) {
        if(4) {
            this->PoseRotation[a0].resize(4);
            tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->PoseRotation[a0][0], 4);
            if(tlen < 0) return tlen; else pos += tlen;
        }
    }

    return pos;
}

int LCM_ChromaTag_Detection_Type::_getEncodedSizeNoHash() const
{
    int enc_size = 0;
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, this->DetectionSize);
    enc_size += this->DetectionSize * __double_encoded_array_size(NULL, 12);
    enc_size += this->DetectionSize * __double_encoded_array_size(NULL, 12);
    enc_size += __boolean_encoded_array_size(NULL, this->DetectionSize);
    enc_size += __int32_t_encoded_array_size(NULL, this->DetectionSize);
    enc_size += this->DetectionSize * __boolean_encoded_array_size(NULL, 36);
    enc_size += __boolean_encoded_array_size(NULL, this->DetectionSize);
    enc_size += this->DetectionSize * __double_encoded_array_size(NULL, 3);
    enc_size += this->DetectionSize * __double_encoded_array_size(NULL, 4);
    return enc_size;
}

uint64_t LCM_ChromaTag_Detection_Type::_computeHash(const __lcm_hash_ptr *)
{
    uint64_t hash = 0xb8f2553787548286LL;
    return (hash<<1) + ((hash>>63)&1);
}

}

#endif
