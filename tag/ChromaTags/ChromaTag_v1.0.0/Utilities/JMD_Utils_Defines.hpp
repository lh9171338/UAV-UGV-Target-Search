#pragma once
#ifndef JMD_UTILS_DEFINES_H_
#define JMD_UTILS_DEFINES_H_

/*
 //====================================================================//
 
 ==========================
 Joseph DeGol
 UIUC Fall 2013
 ==========================
 JMD_Utils_Defines: Version 1.0
 ==========================
 
 ================================================================
 JMD_Utils_Defines.hpp
 A header file for global defines
 ================================================================
 
 --------------- General Defines ---------------
 DEF_DUMMY - double/float/int values for setting/checking a dummy value 
 ------------- End General Defines -------------
  
 
 --------------- Math Defines ---------------
 DEF_EQUALITY_THRESHOLD - epsilon for equality comparison with doubles
 DEF_EQUALITY_THRESHOLD_F - epsilon for equality comparison with floats
  
 DEF_MAX_MATRIX_SIZE - maximum size matrix or vector can be
 
 DEF_NAN - Not A Number from dividing by zero, etc...
  
 DEF_MATH_PI - the number Pi = 3.14159265
  
 DEF_Sign - function for mathematical sign function
 ------------- End Math Defines -------------
 
 //====================================================================//
 */





//====================================================================//
//====================================================================//
//================== JMD Utils Defines Definition ====================//
//====================================================================//
//====================================================================//

//----------------------------------------------------------------//
//--------------------------- Macros -----------------------------//
//----------------------------------------------------------------//

//----------------------------------------------------------------//
//------------------------- End Macros ---------------------------//
//----------------------------------------------------------------//

namespace JMD 
{       

	//----------------------------------------------------------------//
    //---------------------- General Defines -------------------------//
    //----------------------------------------------------------------//
    
	/*--------------- DEF_DUMMY ---------------*/
	// dummy value to set and check
	static const unsigned char DEF_DUMMY_UCHAR =  240;
	static const unsigned int  DEF_DUMMY_UINT  =  999887766;
	static const int           DEF_DUMMY_INT   = -999888777;
	static const float         DEF_DUMMY_FLT   = -999888777.777888999f;
	static const double        DEF_DUMMY_DBL   = -999888777.777888999;
	/*------------- End DEF_DUMMY -------------*/
	
	//----------------------------------------------------------------//
    //-------------------- End General Defines -----------------------//
    //----------------------------------------------------------------//
    
    
    
	//----------------------------------------------------------------//
    //----------------------- Math Defines ---------------------------//
    //----------------------------------------------------------------//
	
	/*--------------- DEF_EQUALITY_THRESHOLD ---------------*/
	// Epsilon value for comparing double values and dealing with
	// floating point errors
	static const double DEF_EQUALITY_THRESHOLD   = 0.00000001;
	static const float  DEF_EQUALITY_THRESHOLD_F = 0.00000001f;
	/*------------- End DEF_EQUALITY_THRESHOLD -------------*/

	/*--------------- DEF_MAX_MATRIX_SIZE ---------------*/
	// maximum size of a matrix or vector, as defined by number of total
	// elements in the underlying array data structure
	static const unsigned int DEF_MAX_MATRIX_SIZE = 100000000;
	/*------------- End DEF_MAX_MATRIX_SIZE -------------*/
	
	/*--------------- DEF_NAN ---------------*/
	// Not A Number, 100 / 0 = DEF_NAN
	static const double DEF_NAN = 9876543210.0123456789;
	/*------------- End DEF_NAN -------------*/
	
	/*--------------- DEF_INF ---------------*/
	// Infinity and -Infinity
	static const double DEF_PINF =  901901987;
	static const double DEF_NINF = -901901987;
	/*------------- End DEF_INF -------------*/
	
	/*--------------- DEF_MATH_PI ---------------*/
	// Pi
	static const double DEF_MATH_PI = 3.14159265;
	/*------------- End DEF_MATH_PI -------------*/
	
	/*--------------- DEF_Sign ---------------*/
	//  1 if # > 0,
	//  0 if # == 0,
	// -1 if # < 0
	template <typename T> int DEF_Sign(T val) { return (T(0) < val) - (val < T(0)); }
	/*------------- End DEF_Sign -------------*/
	
	/*--------------- DEF_1Div255 ---------------*/
	// 1 / 255
	//
	static const double DEF_1DIV255       = 0.00392156862;
	static const double DEF_1DIV255_SHORT = 0.00392; 
	/*------------- End DEF_1Div255 -------------*/
	
	/*--------------- DEF_IntSqrt ---------------*/
	const unsigned short squares[] = { 0,1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,256,289,324,361,400,441,484,529,576,625,676,729,784,841,900,961,1024,1089,1156,1225,1296,1369,1444,1521,1600,1681,1764,1849,1936,2025,2116,2209,2304,2401,2500,2601,2704,2809,2916,3025,3136,3249,3364,3481,3600,3721,3844,3969,4096,4225,4356,4489,4624,4761,4900,5041,5184,5329,5476,5625,5776,5929,6084,6241,6400,6561,6724,6889,7056,7225,7396,7569,7744,7921,8100,8281,8464,8649,8836,9025,9216,9409,9604,9801,10000,10201,10404,10609,10816,11025,11236,11449,11664,11881,12100,12321,12544,12769,12996,13225,13456,13689,13924,14161,14400,14641,14884,15129,15376,15625,15876,16129,16384,16641,16900,17161,17424,17689,17956,18225,18496,18769,19044,19321,19600,19881,20164,20449,20736,21025,21316,21609,21904,22201,22500,22801,23104,23409,23716,24025,24336,24649,24964,25281,25600,25921,26244,26569,26896,27225,27556,27889,28224,28561,28900,29241,29584,29929,30276,30625,30976,31329,31684,32041,32400,32761,33124,33489,33856,34225,34596,34969,35344,35721,36100,36481,36864,37249,37636,38025,38416,38809,39204,39601,40000,40401,40804,41209,41616,42025,42436,42849,43264,43681,44100,44521,44944,45369,45796,46225,46656,47089,47524,47961,48400,48841,49284,49729,50176,50625,51076,51529,51984,52441,52900,53361,53824,54289,54756,55225,55696,56169,56644,57121,57600,58081,58564,59049,59536,60025,60516,61009,61504,62001,62500,63001,63504,64009,64516,65025 };

	inline int DEF_IntSqrt(unsigned short x) {
	    const unsigned short *p = squares;
	
	    if (p[128] <= x) p += 128;
	    if (p[ 64] <= x) p +=  64;
	    if (p[ 32] <= x) p +=  32;
	    if (p[ 16] <= x) p +=  16;
	    if (p[  8] <= x) p +=   8;
	    if (p[  4] <= x) p +=   4;
	    if (p[  2] <= x) p +=   2;
	    if (p[  1] <= x) p +=   1;
	
	    return p - squares;
	}
	inline unsigned char DEF_UCharSqrt(unsigned short x) { return static_cast<unsigned char>(DEF_IntSqrt(x)); }
	
	/*------------- End DEF_IntSqrt -------------*/
	
	//----------------------------------------------------------------//
    //--------------------- End Math Defines -------------------------//
    //----------------------------------------------------------------//
	
}//end namespace JMD

//====================================================================//
//====================================================================//
//====================================================================//
//====================================================================//
//====================================================================//
#endif

