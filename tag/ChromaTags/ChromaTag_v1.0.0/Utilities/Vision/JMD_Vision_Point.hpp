#pragma once
#ifndef JMD_VISION_POINT_H_
#define JMD_VISION_POINT_H_

/*
 //====================================================================//
 
 ==========================
 Joseph DeGol
 UIUC Fall 2015
 ==========================
 JMD Vision Point: Version 1.0
 ==========================
 
 ================================================================
 JMD_Vision_Point.hpp
 A Class for a Point, Keypoint, etc...
 ================================================================
 
 List of Functions:
 
 ----- Enumerations -----
 
 --- End Enumerations ---
 
 ----- Constructors -----
 
 --- end Constructors ---
 
 ----- Utility Methods -----
 
 --- End Utility Methods ---
 
 //====================================================================//
 */





//====================================================================//
//====================================================================//
//============================ Preamble ==============================//
//====================================================================//
//====================================================================//


//---------------------------------------------------------------//
//------------------------- Includes ----------------------------//
//---------------------------------------------------------------//

//system
#include <cmath>
#include <iostream>

//utilities
#include "JMD_Utils_Defines.hpp"

//---------------------------------------------------------------//
//------------------------ end Includes -------------------------//
//---------------------------------------------------------------//


//---------------------------------------------------------------//
//------------------------- Macros ------------------------------//
//---------------------------------------------------------------//

//---------------------------------------------------------------//
//------------------------ end Macros ---------------------------//
//---------------------------------------------------------------//


//---------------------------------------------------------------//
//----------------------- Namespaces ----------------------------//
//---------------------------------------------------------------//

//---------------------------------------------------------------//
//---------------------- end Namespaces -------------------------//
//---------------------------------------------------------------//


//---------------------------------------------------------------//
//------------------------- Globals -----------------------------//
//---------------------------------------------------------------//

//---------------------------------------------------------------//
//------------------------ end Globals --------------------------//
//---------------------------------------------------------------//


//---------------------------------------------------------------//
//------------------- Function Prototypes -----------------------//
//---------------------------------------------------------------//

/*----- Forward Declerations -----*/
namespace JMD {
	//class
	class JMD_Vision_Point2D;
	
	//friend operators >> , <<
	std::ostream &operator << (std::ostream &os, const JMD_Vision_Point2D &point_param);
}
/*--- End Forward Declerations ---*/

//---------------------------------------------------------------//
//------------------ end Function Prototypes --------------------//
//---------------------------------------------------------------//

//====================================================================//
//====================================================================//
//====================================================================//
//====================================================================//
//====================================================================//







namespace JMD {
    
    /*--------------- Forward Declerations ---------------*/
	/*------------- End Forward Declerations -------------*/
    
    //====================================================================//
    //====================================================================//
    //================== JMD Vision Point2D Definition ===================//
    //====================================================================//
    //====================================================================//
    class JMD_Vision_Point2D
    {
        
        /*--------------- Enumerations ---------------*/
        public:
        /*------------- End Enumerations -------------*/
        
        //---------------------------------------------------------------//
        //------------------------- Private -----------------------------//
        //---------------------------------------------------------------//
        private:
        
        /*--------------- Variables ---------------*/
        
        // U value of a pixel point
        double myU;
        
        // V value of a pixel point
        double myV;
        
        // value at location
        double myW;
        
        /*------------- End Variables -------------*/
        
        
        /*--------------- General ---------------*/
        /*------------- End General -------------*/
        
        //---------------------------------------------------------------//
        //----------------------- end Private ---------------------------//
        //---------------------------------------------------------------//
        
        
        //---------------------------------------------------------------//
        //-------------------------- Public -----------------------------//
        //---------------------------------------------------------------//
        public:
        
		/*--------------- Constructors ---------------*/
		// Constructor
        //
        // input:
        //    u_param - U value of a pixel point
        //    v_param - V value of a pixel point
        JMD_Vision_Point2D();
        JMD_Vision_Point2D(double u_param, double v_param);
        JMD_Vision_Point2D(const JMD_Vision_Point2D &point_param);
        //
        //    d_param - value at pixel point
        JMD_Vision_Point2D(double u_param, double v_param, double w_param);
		/*------------- end Constructors -------------*/
		
		
        
		/*--------------- Destructors ---------------*/
		~JMD_Vision_Point2D();
		/*------------- end Destructors ------------*/
		
        
        
        /*--------------- Utility Methods ---------------*/
        
        /*----- Distance To -----*/
        // calculates the distance from *this point to
        // a given line or point
        //
        // input:
        //    line_param - line to find distance to
        //    point_param - point to find distance to
        // output:
        //    double - distance value
        double DistanceTo(JMD_Vision_Point2D *point_param);
        //
        // Estimates that do not calculate squares or sqrts
        //
        double DistanceTo_Est(JMD_Vision_Point2D *point_param);
        /*--- End Distance To ---*/
        
        /*------------- End Utility Methods -------------*/
        
        
        
        /*--------------- Setters/Getters ---------------*/
        
        /*----- U -----*/
        void U(double u_param);
        double U() const;
        /*--- End U ---*/
        
        /*----- V -----*/
        void V(double v_param);
        double V() const;
        /*--- End V ---*/
        
        /*----- W -----*/
        void W(double w_param);
        double W() const;
        /*--- End W ---*/
        
        /*------------- End Setters/Getters -------------*/
        
        
        
        /*--------------- Operator Overloads ---------------*/

        /*----- operator= -----*/        
        JMD_Vision_Point2D& operator=(const JMD_Vision_Point2D &rhs_param);
        /*--- End operator= ---*/
        
        /*----- operator== -----*/
        bool operator==(const JMD_Vision_Point2D &rhs_param);
        /*--- End operator== ---*/

        /*----- operator!= -----*/
        bool operator!=(const JMD_Vision_Point2D &rhs_param);
        /*--- End operator!= ---*/
        
        /*----- Operator << -----*/
        // passes along the point data in an out stream object, for use
		// in things like cout; e.g. cout << line_param;
		// 
        friend std::ostream& operator << (std::ostream &os, const JMD_Vision_Point2D &point_param);
        /*--- End Operator << ---*/
        
        /*------------- End Operator Overloads -------------*/
        
        
        //---------------------------------------------------------------//
        //------------------------ end Public ---------------------------//
        //---------------------------------------------------------------//
        
        
    };
    //====================================================================//
    //====================================================================//
    //====================================================================//
    //====================================================================//
    //====================================================================//
    
}//end namespace JMD


#endif

