/*
 //====================================================================//
 
 ==========================
 Joseph DeGol
 UIUC Fall 2015
 ==========================
 JMD Vision Point: Version 1.0
 ==========================
 
 ================================================================
 JMD_Vision_Point.cpp
 A Class for a Point, Keypoint, etc...
 ================================================================
 
 //====================================================================//
 */





//====================================================================//
//====================================================================//
//============================ Preamble ==============================//
//====================================================================//
//====================================================================//


//---------------------------------------------------------------//
//------------------------- Includes ----------------------------//
//---------------------------------------------------------------//

#include "JMD_Vision_Point.hpp"

//---------------------------------------------------------------//
//------------------------ end Includes -------------------------//
//---------------------------------------------------------------//


//---------------------------------------------------------------//
//----------------------- Namespaces ----------------------------//
//---------------------------------------------------------------//

//namespaces

//---------------------------------------------------------------//
//---------------------- end Namespaces -------------------------//
//---------------------------------------------------------------//


//---------------------------------------------------------------//
//------------------------- Globals -----------------------------//
//---------------------------------------------------------------//

//---------------------------------------------------------------//
//------------------------ end Globals --------------------------//
//---------------------------------------------------------------//


//---------------------------------------------------------------//
//------------------- Function Prototypes -----------------------//
//---------------------------------------------------------------//

//---------------------------------------------------------------//
//------------------ end Function Prototypes --------------------//
//---------------------------------------------------------------//

//====================================================================//
//====================================================================//
//====================================================================//
//====================================================================//
//====================================================================//





//====================================================================//
//====================================================================//
//================= JMD Vision Point Implementation ==================//
//====================================================================//
//====================================================================//

//---------------------------------------------------------------//
//-------------------------- Private ----------------------------//
//---------------------------------------------------------------//

//---------------------------------------------------------------//
//------------------------ end Private --------------------------//
//---------------------------------------------------------------//


//---------------------------------------------------------------//
//-------------------------- Public -----------------------------//
//---------------------------------------------------------------//

/*--------------- Constructors ---------------*/
JMD::JMD_Vision_Point2D::JMD_Vision_Point2D() 
{ 
	myU = 0.0;
	myV = 0.0;
	myW = JMD::DEF_NINF;
}
JMD::JMD_Vision_Point2D::JMD_Vision_Point2D(double u_param, double v_param)
{
	myU = u_param;
	myV = v_param;
	myW = JMD::DEF_NINF;
}
JMD::JMD_Vision_Point2D::JMD_Vision_Point2D(const JMD::JMD_Vision_Point2D &point_param)
{
	this->myU = point_param.myU;
	this->myV = point_param.myV;      
	this->myW = point_param.myW;      
}
JMD::JMD_Vision_Point2D::JMD_Vision_Point2D(double u_param, double v_param, double w_param)
{
	JMD_Vision_Point2D(u_param,v_param);
	this->myW = w_param;
}
/*------------- End Constructors -------------*/

	
	
/*--------------- Destructors ---------------*/
JMD::JMD_Vision_Point2D::~JMD_Vision_Point2D() { }
/*------------- End Destructors -------------*/

    

/*--------------- Utility ---------------*/

/*----- Distance To -----*/
double JMD::JMD_Vision_Point2D::DistanceTo(JMD_Vision_Point2D *point_param)
{ 
	return 0; 
}
double JMD::JMD_Vision_Point2D::DistanceTo_Est(JMD_Vision_Point2D *point_param)
{
	return 0;
}
/*--- End Distance To ---*/

/*------------- End Utility -------------*/

				
		
/*--------------- Setters/Getters ---------------*/
    
/*----- U -----*/
void   JMD::JMD_Vision_Point2D::U(double u_param)  { myU = u_param; }
double JMD::JMD_Vision_Point2D::U() const          { return myU; }
/*--- End U ---*/

/*----- V -----*/
void   JMD::JMD_Vision_Point2D::V(double v_param)  { myV = v_param; }
double JMD::JMD_Vision_Point2D::V() const          { return myV; }
/*--- End V ---*/

/*----- W -----*/
void   JMD::JMD_Vision_Point2D::W(double w_param) { myW = w_param; }
double JMD::JMD_Vision_Point2D::W() const         { return myW; }
/*--- End W ---*/

/*------------- End Setters/Getters -------------*/



/*--------------- Operator Overloads ---------------*/

/*----- operator= -----*/
JMD::JMD_Vision_Point2D& JMD::JMD_Vision_Point2D::operator=(const JMD::JMD_Vision_Point2D &rhs_param)
{
	//check for self assignment
	if( this != &rhs_param ) 
	{	
		//set dimensions
		this->myU = rhs_param.myU;
		this->myV = rhs_param.myV;
		this->myW = rhs_param.myW;
	}
	
	//return
	return (*this);
}
/*--- End operator= ---*/

/*----- operator== -----*/
bool JMD::JMD_Vision_Point2D::operator==(const JMD::JMD_Vision_Point2D &rhs_param)
{
	// if U and V are the same, return true
	if( fabs(myU - rhs_param.U()) < JMD::DEF_EQUALITY_THRESHOLD && fabs(myV - rhs_param.V()) < JMD::DEF_EQUALITY_THRESHOLD )
	{
		return true;
	}
	else
	{
		return false;
	}
}
/*--- End operator== ---*/

/*----- operator!= -----*/
bool JMD::JMD_Vision_Point2D::operator!=(const JMD::JMD_Vision_Point2D &rhs_param)
{
	//opposite of ==
	return !(*this == rhs_param);
}
/*--- End operator!= ---*/

/*----- Operator << -----*/
std::ostream& JMD::operator << (std::ostream &os, const JMD::JMD_Vision_Point2D &point_param)
{
	/*----- Output Stream -----*/
	
	os << "( " << point_param.myU << ", " << point_param.myV << " )";
	if (point_param.myW != JMD::DEF_NINF) { os << " (" << point_param.myW << ")"; }
	
	/*--- End Output Stream ---*/
	
	//return
	return os;
}
/*--- End Operator << ---*/

/*--------------- Operator Overloads ---------------*/


//---------------------------------------------------------------//
//-------------------------- Public -----------------------------//
//---------------------------------------------------------------//


//====================================================================//
//====================================================================//
//====================================================================//
//====================================================================//
//====================================================================//
